//workflow.controller
const express = require('express');
const router = express.Router();
const workflowService = require('./workflow.service');
const db = require('_helpers/db'); // ðŸ‘ˆ REQUIRED IMPORT

// Routes
router.get('/', getAll); Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // get all workflows
router.get('/employee/:employeeId', getByEmployeeId); // get workflows of one employee
router.get('/:id', getById); Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // get workflow by id
router.post('/', create); Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // add new workflow
router.put('/:id', update); Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // update workflow

module.exports = router;

// ------------------ ROUTE HANDLERS ------------------

function getAll(req, res, next) {
Â  Â  workflowService.getAll()
Â  Â  Â  Â  .then(workflows => res.json(workflows))
Â  Â  Â  Â  .catch(next);
}

// ðŸ”‘ FIXED: Logic to convert public employeeId (EMP001) to internal ID
async function getByEmployeeId(req, res, next) {
Â  try {
Â  Â  // 1. Find the Employee's internal primary key (id) using the public string employeeId
Â  Â  const employee = await db.Employee.findOne({
Â  Â  Â  where: { employeeId: req.params.employeeId }, 
Â  Â  Â  attributes: ['id'] // Only fetch the internal primary key
Â  Â  });

Â  Â  if (!employee) {
Â  Â  Â  Â  // If the employee ID doesn't exist, return an empty array gracefully
Â  Â  Â  Â  return res.json([]); 
Â  Â  }

Â  Â  // 2. Use the Employee's internal ID to find the workflows
Â  Â  const workflows = await db.Workflow.findAll({
Â  Â  Â  where: { employeeId: employee.id }, // Use the internal numeric employee.id
Â  Â  Â  include: [
Â  Â  Â  Â  { model: db.Request, as: 'request' }
Â  Â  Â  ],
      order: [['id', 'DESC']]
Â  Â  });
Â  Â  res.json(workflows);
Â  } catch (err) {
Â  Â  next(err); 
Â  }
}

function getById(req, res, next) {
Â  Â  workflowService.getById(req.params.id)
Â  Â  Â  Â  .then(workflow => res.json(workflow))
Â  Â  Â  Â  .catch(next);
}

function create(req, res, next) {
Â  Â  workflowService.create(req.body)
Â  Â  Â  Â  .then(workflow => res.json(workflow))
Â  Â  Â  Â  .catch(next);
}

function update(req, res, next) {
Â  Â  workflowService.update(req.params.id, req.body)
Â  Â  Â  Â  .then(workflow => res.json(workflow))
Â  Â  Â  Â  .catch(next);
}